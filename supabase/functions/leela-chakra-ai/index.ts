// Follow this setup guide to integrate the Deno language server with your editor:
// https://deno.land/manual/getting_started/setup_your_environment
// This enables autocomplete, go to definition, etc.
import {
  Context,
  GrammyError,
  HttpError,
} from "https://deno.land/x/grammy@v1.8.3/mod.ts";
import {
  handleUpdateLeelaChakra,
  leelaChakraBot,
} from "../_shared/telegram/bots.ts";
import { getAiFeedbackFromSupabase } from "../_shared/supabase/ai.ts";
import {
  getBiggest,
  getCorrects,
  getLastCallback,
  getQuestion,
  resetProgress,
  updateProgress,
  updateResult,
} from "../_shared/supabase/progress.ts";
import { createUser, getUid, updateUser } from "../_shared/supabase/users.ts";
import { pathIncrement } from "../path-increment.ts";
import {
  gameStep,
  getLastStep,
  getPlan,
  updateHistory,
} from "../_shared/supabase/game.ts";
import { checkAndUpdate, getSupabaseUser } from "../_shared/supabase/users.ts";
import { sendPaymentInfo } from "../_shared/supabase/payments.ts";

// Setup type definitions for built-in Supabase Runtime APIs
/// <reference types="https://esm.sh/@supabase/functions-js/src/edge-runtime.d.ts" />

console.log("Hello from LeelaChakra Ai!");
await leelaChakraBot.api.setMyCommands([
  {
    command: "/start",
    description: "Start chatting with LeelaChakra Ai",
  },
  {
    command: "/course",
    description: "Start test with LeelaChakra Ai",
  },
  {
    command: "/step",
    description: "Make a step",
  },
  {
    command: "/buy",
    description: "Buy a plan",
  },
  // {
  //   command: "/room",
  //   description: "Create a room",
  // },
]);

leelaChakraBot.command("start", async (ctx: Context) => {
  await checkAndUpdate(ctx);
  console.log("start");
  if (!ctx.from) return;
  await ctx.replyWithChatAction("typing"); // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
  console.log("ü•Äcreate user:", ctx.from);
  await createUser({
    telegram_id: ctx.from.id,
    first_name: ctx.from.first_name,
    last_name: ctx.from.last_name,
    username: ctx.from.username,
    is_bot: ctx.from.is_bot,
    language_code: ctx.from.language_code,
  });
  const isRu = ctx.from?.language_code === "ru";
  await ctx.reply(
    isRu
      ? `üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è "–õ–∏–ª–∞ –ß–∞–∫—Ä–∞", ${ctx.from?.first_name}! üîÆ\n\nüåü –í —ç—Ç–æ–π —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π –∏–≥—Ä–µ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—à—å—Å—è –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ —á–∞–∫—Ä—ã, –æ—Ç–∫—Ä—ã–≤–∞—è —Ç–∞–π–Ω—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, —Å–∫—Ä—ã—Ç—ã–µ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–±—è.\n\nüí´ –ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –º–∏—Ä –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞, –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å —Å–≤–æ–µ –∏—Å—Ç–∏–Ω–Ω–æ–µ "–Ø" –∏ —Ä–∞—Å–∫—Ä—ã—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Å–≤–æ–∏—Ö —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω—Ç—Ä–æ–≤? –° "–õ–∏–ª–æ–π –ß–∞–∫—Ä–∞" —Ç—ã —Å–º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –≥–ª—É–±–∂–µ —Å–µ–±—è, –æ–±—Ä–µ—Å—Ç–∏ –≥–∞—Ä–º–æ–Ω–∏—é –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–∏—Ä–∞.\n\nüîÆ –ü—É—Å—Ç—å –∫–∞–∂–¥–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –≤ –∏–≥—Ä–µ –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ –Ω–æ–≤–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, –º—É–¥—Ä–æ—Å—Ç—å –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ. –î–µ—Ä–∑–∞–π –∏ –æ—Ç–∫—Ä–æ–π –¥–≤–µ—Ä–∏ —Å–≤–æ–µ–≥–æ –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è, –∏—Å—Å–ª–µ–¥—É—è —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ —á–∞–∫—Ä—ã –∏ –æ–±—Ä–µ—Ç–∞—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –≥–∞—Ä–º–æ–Ω–∏—é!`
      : `üîÆ Welcome to the Leela Chakra Self-Discovery Game, ${ctx.from?.first_name}! üîÆ\n\nüåü In this exciting game, you will embark on an exciting journey through the chakras, discovering the secrets and possibilities hidden within you.\n\nüí´ Are you ready to dive into the world of spiritual growth, meet your true self and unlock the potential of your energy centers? With "Leela Chakra" you can learn more about yourself, find harmony and understanding of your inner world.\n\nüîÆ May each challenge in the game bring you new insights, wisdom and inspiration. Dare to open the doors of your subconscious mind, exploring the mysterious chakras and finding inner harmony!`,
    {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: isRu ? "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç" : "Start test",
              callback_data: "leelachakra_01_01",
            },
            {
              text: isRu ? "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É" : "Start game",
              callback_data: "make_step",
            },
          ],
        ],
      },
    },
  );
});

leelaChakraBot.command("step", async (ctx) => {
  await checkAndUpdate(ctx);
  console.log("step");
  await ctx.replyWithChatAction("typing");
  const isRu = ctx.from?.language_code === "ru";

  ctx.reply(
    isRu
      ? "–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —à–∞–≥, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!"
      : "To make a step, click the button below!",
    {
      reply_markup: {
        inline_keyboard: [
          [{
            text: isRu ? "–°–¥–µ–ª–∞—Ç—å —à–∞–≥" : "Make a step",
            callback_data: "make_step",
          }],
        ],
      },
    },
  );
});

leelaChakraBot.command("course", async (ctx) => {
  await checkAndUpdate(ctx);
  console.log("course");
  const theme = "leelachakra";
  await ctx.replyWithChatAction("typing");
  if (!ctx.from) throw new Error("User not found");
  const lang = ctx.from?.language_code === "ru";
  if (!theme) {
    await ctx.reply(lang ? "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." : "Theme not found.");
    return;
  }
  try {
    const questionContext = {
      lesson_number: 1,
      subtopic: 1,
    };

    console.log(questionContext, "questionContext");
    const questions = await getQuestion({
      ctx: questionContext,
      language: theme,
    });
    if (questions.length > 0) {
      const {
        topic: ruTopic,
        image_lesson_url,
        topic_en: enTopic,
        url,
      } = questions[0];

      const user_id = await getUid(ctx.from?.username || "");
      if (!user_id) {
        ctx.reply(lang ? "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã." : "You are not registered.");
        return;
      }
      const topic = lang ? ruTopic : enTopic;
      const allAnswers = await getCorrects({
        user_id: user_id.toString(),
        language: "all",
      });
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const messageText = `${topic}\n\n<i><u>${
        lang
          ? "–¢–µ–ø–µ—Ä—å –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è."
          : "Now we are offering you to reinforce the acquired knowledge."
      }</u></i>\n\n<b>${lang ? "Total: " : "Total: "}${allAnswers} $IGLA</b>`;

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
      const inlineKeyboard = [
        [{
          text: lang ? "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É" : "Go to the question",
          callback_data: `${theme}_01_01`,
        }],
      ];

      if (url && lang) {
        console.log(url, "url");
        await ctx.replyWithVideoNote(url);
      }
      if (image_lesson_url) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.replyWithPhoto(image_lesson_url || "", {
          caption: messageText,
          parse_mode: "HTML",
          reply_markup: { inline_keyboard: inlineKeyboard },
        });
        return;
      } else {
        await ctx.reply(messageText, {
          parse_mode: "HTML",
          reply_markup: { inline_keyboard: inlineKeyboard },
        });
        return;
      }
    } else {
      await ctx.reply(lang ? "–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã." : "No questions found.");
    }
  } catch (error) {
    console.error(error);
  }
});

leelaChakraBot.command("buy", async (ctx) => {
  await checkAndUpdate(ctx);
  const lang = ctx.from?.language_code === "ru";
  await ctx.reply(
    lang
      ? `<b>–ë–∞–∑–æ–≤—ã–π –û–Ω–ª–∞–π–Ω - 432‚≠ê –≤ –º–µ—Å—è—Ü</b>
  - –û–Ω–ª–∞–π–Ω –∏–≥—Ä–∞
  - –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –±–æ—Ç–µ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –æ–±—É—á–∞—é—â–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
  - –ò–ò –≥—É—Ä—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
  - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ —á–∞—Ç–µ

  <b>–ì—Ä—É–ø–ø–æ–≤–∞—è –°–µ—Å—Å–∏—è - 4754‚≠ê –≤ –º–µ—Å—è—Ü</b>
  - –í—Å–µ, —á—Ç–æ –≤ —Ç–∞—Ä–∏—Ñ–µ "–ë–∞–∑–æ–≤—ã–π –û–Ω–ª–∞–π–Ω"
  - –ì—Ä—É–ø–ø–æ–≤–∞—è –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–∞ —Å –≤–µ–¥—É—â–∏–º
  - –ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ä–µ—Ç–∞

<b>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –°–µ—Å—Å–∏—è - 47 975‚≠ê –≤ –º–µ—Å—è—Ü</b>
–í—Å–µ, —á—Ç–æ –≤ —Ç–∞—Ä–∏—Ñ–µ "–ë–∞–∑–æ–≤—ã–π –û–Ω–ª–∞–π–Ω"
  - 4 –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∏–≥—Ä—ã —Å —Ä–∞–∑–±–æ—Ä–æ–º —Ü–µ–ª–µ–π
  - –õ–∏—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ —á–∞—Ç–µ
  - –ß–µ–∫-–ª–∏—Å—Ç –∏ –∞–Ω–∞–ª–∏–∑ –∏–≥—Ä–æ–∫–∞`
      : `<b>Basic Online - 432‚≠ê per month</b>
   - Online game
   - Self-paced learning in the bot with access to educational materials
   - AI guru assistant
   - Chat support
 
   <b>Group Session - 4754‚≠ê per month</b>
   - Everything in the "Basic Online" plan
   - Group online game with a host
   - Individual portrait analysis
 
 <b>Individual Session - 47,975‚≠ê per month</b>
 Everything in the "Basic Online" plan
   - 4 individual games with goal analysis
   - Personal chat support
   - Checklist and player analysis`,
    {
      reply_markup: {
        inline_keyboard: [[{
          text: lang ? "–ë–∞–∑–æ–≤—ã–π –û–Ω–ª–∞–π–Ω" : "Basic Online",
          callback_data: "buy_basic",
        }], [{
          text: lang ? "–ì—Ä—É–ø–ø–æ–≤–∞—è –°–µ—Å—Å–∏—è" : "Group Session",
          callback_data: "buy_group",
        }], [{
          text: lang ? "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –°–µ—Å—Å–∏—è" : "Individual Session",
          callback_data: "buy_individual",
        }]],
      },
      parse_mode: "HTML",
    },
  );
  return;
});

leelaChakraBot.on("pre_checkout_query", (ctx) => {
  ctx.answerPreCheckoutQuery(true);
  return;
});

leelaChakraBot.on("message:successful_payment", async (ctx) => {
  await checkAndUpdate(ctx);
  const lang = ctx.from?.language_code === "ru";
  if (!ctx.from?.username) throw new Error("User not found");
  const textToPost = "üôèüèª Namaste";
  await ctx.reply(
    lang ? "ü§ù –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!" : "ü§ù Thank you for the purchase!",
  );
  const user_id = await getUid(ctx.from?.username);
  if (!user_id) throw new Error("User not found");
  await sendPaymentInfo(
    user_id,
    ctx.message.successful_payment.invoice_payload,
  );
  await ctx.api.sendMessage("-1002090264748", textToPost);
  return;
});

leelaChakraBot.on("message:dice", async (ctx) => {
  await checkAndUpdate(ctx);
  const isRu = ctx.from?.language_code === "ru";
  const roll = ctx.message.dice.value; // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É–±–∏–∫–∞

  if (!ctx.from?.id) throw new Error("Telegram id not found");
  const user_id = await getUid(ctx.from?.username || "");
  if (!user_id) throw new Error("User not found");
  const lastStep = await getLastStep(user_id.toString());
  const step = await gameStep({
    roll: roll,
    response: [lastStep],
    telegram_id: ctx.from?.id.toString(),
  });
  console.log("step", step);
  if (!ctx.from.language_code) throw new Error("Language code not found");
  const plan = await getPlan(step.loka, ctx.from.language_code);
  console.log(plan, "plan");
  await ctx.reply(
    isRu
      ? `${step.direction} –í–∞—à –ø–ª–∞–Ω: ${step.loka}\n\n${plan}\n\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç.`
      : `${step.direction} Your plan: ${step.loka}\n\n${plan}\n\nReply to the message to write report.`,
    { reply_markup: { force_reply: true } },
  );
  await updateUser(ctx.from.id.toString(), { isWrite: true });
  return;
});

leelaChakraBot.on("message:text", async (ctx) => {
  await checkAndUpdate(ctx);
  console.log(ctx);
  try {
    await ctx.replyWithChatAction("typing");
    const query = ctx?.message?.text;
    const isRu = ctx.from?.language_code === "ru";
    const language_code = ctx.from.language_code || "en";

    if (query) {
      if (!ctx.from.username) {
        await ctx.reply(
          isRu
            ? "–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º."
            : "You are not registered yet. Please, register to use this bot.",
        );
        throw new Error("User is not registered yet");
      }
      if (ctx.message.reply_to_message) {
        if (
          ctx.message.reply_to_message.text?.includes("–í–∞—à –ø–ª–∞–Ω") ||
          ctx.message.reply_to_message.text?.includes("Your plan")
        ) {
          const isWrite = (await getSupabaseUser(ctx.from.username))?.isWrite;
          const step_callback = {
            reply_markup: {
              inline_keyboard: [[
                {
                  text: isRu ? "–°–¥–µ–ª–∞—Ç—å —Ö–æ–¥" : "Make a step",
                  callback_data: `make_step`,
                },
              ]],
            },
          };
          if (!isWrite) {
            ctx.reply(
              isRu
                ? "–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –ø–ª–∞–Ω."
                : "You already answered on this plan.",
              step_callback,
            );
          }
          if (!ctx.from.username) throw new Error("User not found");
          const user_id = await getUid(ctx.from.username);
          if (!user_id) throw new Error("User not found");
          const response = await updateHistory(
            user_id,
            ctx.from.username || "",
            language_code,
            query,
          );
          await updateUser(ctx.from.id.toString(), { isWrite: false });
          await ctx.reply(response, {
            parse_mode: "Markdown",
            ...step_callback,
          });
          return;
        }
      }
      const { ai_content } = await getAiFeedbackFromSupabase({
        query,
        username: ctx.from.username,
        language_code,
      });
      console.log("üí§content", ai_content);
      await ctx.reply(ai_content, { parse_mode: "Markdown" });
      return;
    }
  } catch (error) {
    console.log("üöÄ error", error);
  }
});

leelaChakraBot.on("callback_query:data", async (ctx) => {
  await checkAndUpdate(ctx);
  await ctx.replyWithChatAction("typing");
  console.log(ctx);
  const callbackData = ctx.callbackQuery.data;
  const isHaveAnswer = callbackData.split("_").length === 4;
  const isRu = ctx.from?.language_code === "ru";
  const lang = ctx.from?.language_code === "ru";

  if (callbackData.startsWith("make_step")) {
    console.log("step...");

    await ctx.reply(
      isRu
        ? "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—É–±–∏–∫."
        : "To make a step, send a dice.",
    );
    await ctx.reply("üé≤");
    return;
  }

  if (callbackData.startsWith("buy")) {
    if (callbackData.endsWith("basic")) {
      await ctx.replyWithInvoice(
        isRu ? "–ë–∞–∑–æ–≤—ã–π –û–Ω–ª–∞–π–Ω" : "Basic Online",
        isRu
          ? "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —É—Ä–æ–≤–Ω—è '–ë–∞–∑–æ–≤—ã–π –û–Ω–ª–∞–π–Ω'"
          : "You will receive a subscription to the 'Basic Online' level",
        "basic",
        "", // –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        "XTR", // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞–ª—é—Ç—É Telegram Stars
        [{ label: "–¶–µ–Ω–∞", amount: 432 }],
      );
      return;
    }
    if (callbackData.endsWith("group")) {
      await ctx.replyWithInvoice(
        isRu ? "–ì—Ä—É–ø–ø–æ–≤–∞—è –°–µ—Å—Å–∏—è" : "Group Session",
        isRu
          ? "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —É—Ä–æ–≤–Ω—è '–ë–∞–∑–æ–≤—ã–π –û–Ω–ª–∞–π–Ω'"
          : "You will receive a subscription to the 'Basic Online' level",
        "group",
        "", // –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        "XTR", // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞–ª—é—Ç—É Telegram Stars
        [{ label: "–¶–µ–Ω–∞", amount: 4754 }],
      );
      return;
    }
    if (callbackData.endsWith("individual")) {
      await ctx.replyWithInvoice(
        isRu ? "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –°–µ—Å—Å–∏—è" : "Individual Session",
        isRu
          ? "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —É—Ä–æ–≤–Ω—è '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –°–µ—Å—Å–∏—è'"
          : "You will receive a subscription to the 'Individual Session' level",
        "individual",
        "", // –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        "XTR", // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞–ª—é—Ç—É Telegram Stars
        [{ label: "–¶–µ–Ω–∞", amount: 47975 }],
      );
      return;
    }
  }
  if (
    callbackData.startsWith("start_test") ||
    callbackData.startsWith("leelachakra")
  ) {
    if (callbackData === "start_test") {
      try {
        const theme = callbackData.split("_")[1];
        console.log(`start_test`);
        const questionContext = {
          lesson_number: 1,
          subtopic: 1,
        };

        console.log(theme);
        const questions = await getQuestion({
          ctx: questionContext,
          language: theme,
        });
        if (questions.length > 0) {
          const {
            topic: ruTopic,
            image_lesson_url,
            topic_en: enTopic,
          } = questions[0];

          const user_id = await getUid(ctx.callbackQuery.from.username || "");
          if (!user_id) {
            await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
          }
          const topic = lang ? ruTopic : enTopic;
          const allAnswers = await getCorrects({
            user_id: user_id.toString(),
            language: "all",
          });
          // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          const messageText = `${topic}\n\n<i><u>${
            lang
              ? "–¢–µ–ø–µ—Ä—å –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è."
              : "Now we are offering you to reinforce the acquired knowledge."
          }</u></i>\n\n<b>${
            lang ? "Total: " : "Total: "
          }${allAnswers} $IGLA</b>`;

          // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
          const inlineKeyboard = [
            [{
              text: lang ? "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É" : "Go to the question",
              callback_data: `${theme}_01_01`,
            }],
          ];

          if (image_lesson_url) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await ctx.replyWithPhoto(image_lesson_url || "", {
              caption: messageText,
              parse_mode: "HTML",
              reply_markup: { inline_keyboard: inlineKeyboard },
            });
            return;
          } else {
            await ctx.reply(messageText, {
              parse_mode: "HTML",
              reply_markup: { inline_keyboard: inlineKeyboard },
            });
            return;
          }
        } else {
          await ctx.reply(lang ? "–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã." : "No questions found.");
        }
      } catch (error) {
        console.error(error);
      }
    }

    if (!isHaveAnswer) {
      try {
        const [language, lesson, subtopic] = callbackData.split("_");
        let questions;
        if (!isNaN(Number(lesson)) && !isNaN(Number(subtopic))) {
          // –ó–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é.
          const getQuestionContext = {
            lesson_number: Number(lesson),
            subtopic: Number(subtopic),
          };
          questions = await getQuestion({
            ctx: getQuestionContext,
            language,
          });
        } else {
          // –û–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É.
          console.error(
            "–û–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ(96):",
            lesson,
            subtopic,
            callbackData,
          );
          await ctx.reply(
            lang
              ? "–û–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ."
              : "One of the values is incorrect. Please check the data.",
          );
          return;
        }
        const {
          question: ruQuestion,
          variant_0: ruVariant_0,
          variant_1: ruVariant_1,
          variant_2: ruVariant_2,
          question_en: enQuestion,
          variant_0_en: enVariant_0,
          variant_1_en: enVariant_1,
          variant_2_en: enVariant_2,
          id,
          image_lesson_url,
        } = questions[0];

        const question = lang ? ruQuestion : enQuestion;
        const variant_0 = lang ? ruVariant_0 : enVariant_0;
        const variant_1 = lang ? ruVariant_1 : enVariant_1;
        const variant_2 = lang ? ruVariant_2 : enVariant_2;

        const user_id = await getUid(ctx.callbackQuery.from.username || "");
        if (!user_id) {
          await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
          return;
        }
        console.log(user_id);
        const allAnswers = await getCorrects({
          user_id: user_id.toString(),
          language: "all",
        });
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messageText =
          `<b>‚Ññ${id}</b>\n\n${question}\n\n<b> Total: ${allAnswers} $IGLA</b>`;

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        const inlineKeyboard = [
          [{
            text: variant_0 || "Variant 1",
            callback_data: `${callbackData}_0`,
          }],
          [{
            text: variant_1 || "Variant 2",
            callback_data: `${callbackData}_1`,
          }],
          [{
            text: variant_2 || (lang ? "–ù–µ –∑–Ω–∞—é" : "I don't know"),
            callback_data: `${callbackData}_2`,
          }],
        ];

        if (image_lesson_url) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.editMessageCaption({
            reply_markup: { inline_keyboard: inlineKeyboard },
            caption: messageText,
            parse_mode: "HTML",
          });
        } else {
          await ctx.editMessageText(messageText, {
            reply_markup: { inline_keyboard: inlineKeyboard },
            parse_mode: "HTML",
          });
        }
      } catch (error) {
        console.error(error);
      }
    }

    if (isHaveAnswer) {
      try {
        if (ctx.callbackQuery.from.id) {
          console.log("editMessageReplyMarkup");
          await ctx.editMessageReplyMarkup({
            reply_markup: { inline_keyboard: [] },
          });
        }
        const [language, lesson_number, subtopic, answer] = callbackData.split(
          "_",
        );
        const questionContext = {
          lesson_number: Number(lesson_number),
          subtopic: Number(subtopic),
        };

        const questions = await getQuestion({ ctx: questionContext, language });
        if (questions.length > 0) {
          const {
            correct_option_id,
            id,
          } = questions[0];
          const user_id = await getUid(ctx.callbackQuery.from.username || "");
          if (!user_id) {
            await ctx.reply(
              lang ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." : "User not found.",
            );
            return;
          }

          const path = `${language}_${lesson_number}_${subtopic}`;
          console.log(path, "path for getBiggest");
          const biggestSubtopic = await getBiggest({
            lesson_number: Number(lesson_number),
            language,
          });

          let isTrueAnswer = null;
          if (Number(correct_option_id) === Number(answer)) {
            isTrueAnswer = true;
            await ctx.reply("‚úÖ");
          } else {
            isTrueAnswer = false;
            await ctx.reply("‚ùå");
          }
          await updateProgress({
            user_id: user_id.toString(),
            isTrue: isTrueAnswer,
            language,
          });
          console.log(biggestSubtopic, `biggestSubtopic`);
          console.log(subtopic, `subtopic`);
          const newPath = await pathIncrement({
            path,
            isSubtopic: Number(biggestSubtopic) === Number(subtopic)
              ? false
              : true,
          });
          const correctAnswers = await getCorrects({
            user_id: user_id.toString(),
            language,
          });
          const allAnswers = await getCorrects({
            user_id: user_id.toString(),
            language: "all",
          });

          const lastCallbackId = await getLastCallback(language);
          console.log(lastCallbackId);
          if (lastCallbackId) {
            if (questions[0].id === lastCallbackId) {
              const correctProcent = (correctAnswers / lastCallbackId) * 100;
              if (correctProcent >= 80) {
                await updateResult({
                  user_id: user_id.toString(),
                  language,
                  value: true,
                });
                await ctx.reply(
                  lang
                    ? `<b>ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–æ—à–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç! –î–∞–ª–µ–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –æ—Ç –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.</b>\n\n Total: ${allAnswers} $IGLA`
                    : `<b>ü•≥ Congratulations, you passed the main test! Then you can pass the additional tests from the artificial intelligence.</b>\n\n Total: ${allAnswers} $IGLA`,
                  { parse_mode: "HTML" },
                );
              } else {
                await updateResult({
                  user_id: user_id.toString(),
                  language,
                  value: false,
                });
                await ctx.reply(
                  lang
                    ? `<b>ü•≤ –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç, –Ω–æ —ç—Ç–æ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç –≤–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è! </b>\n\n Total: ${allAnswers} $IGLA`
                    : `<b>ü•≤ You didn't pass the main test, but that won't stop you from developing!</b>\n\n Total: ${allAnswers} $IGLA`,
                  { parse_mode: "HTML" },
                );
              }
            }
            console.log(newPath, `newPath ai koshey`);
            const [newLanguage, newLesson, newSubtopic] = newPath.split("_");
            const getQuestionContext = {
              lesson_number: Number(newLesson),
              subtopic: Number(newSubtopic),
            };
            const newQuestions = await getQuestion({
              ctx: getQuestionContext,
              language,
            });
            console.log(newQuestions, `newQuestions ai koshey for`);
            console.log(getQuestionContext, `getQuestionContext`);
            const { topic: ruTopic, image_lesson_url, topic_en: enTopic, url } =
              newQuestions[0];
            const topic = lang ? ruTopic : enTopic;
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            const messageText = `${topic}\n\n<i><u>${
              lang
                ? "–¢–µ–ø–µ—Ä—å –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è."
                : "Now we are offering you to reinforce the acquired knowledge."
            }</u></i>\n\n<b>${
              lang ? "Total: " : "Total: "
            }${allAnswers} $IGLA</b>`;

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
            const inlineKeyboard = [
              [{
                text: lang ? "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É" : "Go to the question",
                callback_data: newPath,
              }],
            ];
            if (url && lang) {
              console.log(url, "url");
              await ctx.replyWithVideoNote(url);
            }
            if (image_lesson_url) {
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
              await ctx.replyWithPhoto(image_lesson_url, {
                caption: messageText,
                parse_mode: "HTML",
                reply_markup: { inline_keyboard: inlineKeyboard },
              });
              return;
            } else {
              await ctx.reply(messageText, {
                parse_mode: "HTML",
                reply_markup: { inline_keyboard: inlineKeyboard },
              });
              return;
            }
          } else {
            await ctx.reply(
              lang ? "–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã." : "No questions found.",
            );
          }
        } else {
          console.error("Invalid callback(289)");
          return;
        }
      } catch (error) {
        console.error(error);
      }
    }
  }
});

leelaChakraBot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
    throw e;
  } else {
    console.error("Unknown error:", e);
    throw e;
  }
});

Deno.serve(async (req) => {
  try {
    const url = new URL(req.url);
    if (url.searchParams.get("secret") !== Deno.env.get("FUNCTION_SECRET")) {
      console.log("not allowed");
      return new Response("not allowed", { status: 405 });
    }

    console.log("req", req.body);
    return await handleUpdateLeelaChakra(req);
  } catch (err) {
    throw new Error("Error while handling request", { cause: err });
  }
});

// supabase functions deploy leela-chakra-ai --no-verify-jwt
